{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/higormarcelino/authentication/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useGeolocated = void 0;\nvar react_1 = require(\"react\");\n/**\n * Hook abstracting away the interaction with the Geolocation API.\n * @param config - the configuration to use\n */\nfunction useGeolocated() {\n  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _config$positionOptio = config.positionOptions,\n    positionOptions = _config$positionOptio === void 0 ? {\n      enableHighAccuracy: true,\n      maximumAge: 0,\n      timeout: Infinity\n    } : _config$positionOptio,\n    _config$isOptimisticG = config.isOptimisticGeolocationEnabled,\n    isOptimisticGeolocationEnabled = _config$isOptimisticG === void 0 ? true : _config$isOptimisticG,\n    _config$userDecisionT = config.userDecisionTimeout,\n    userDecisionTimeout = _config$userDecisionT === void 0 ? undefined : _config$userDecisionT,\n    _config$suppressLocat = config.suppressLocationOnMount,\n    suppressLocationOnMount = _config$suppressLocat === void 0 ? false : _config$suppressLocat,\n    _config$watchPosition = config.watchPosition,\n    watchPosition = _config$watchPosition === void 0 ? false : _config$watchPosition,\n    _config$geolocationPr = config.geolocationProvider,\n    geolocationProvider = _config$geolocationPr === void 0 ? typeof navigator !== \"undefined\" ? navigator.geolocation : undefined : _config$geolocationPr,\n    _config$watchLocation = config.watchLocationPermissionChange,\n    watchLocationPermissionChange = _config$watchLocation === void 0 ? false : _config$watchLocation,\n    onError = config.onError,\n    onSuccess = config.onSuccess;\n  var userDecisionTimeoutId = (0, react_1.useRef)(0);\n  var isCurrentlyMounted = (0, react_1.useRef)(true);\n  var watchId = (0, react_1.useRef)(0);\n  var _ref = (0, react_1.useState)(isOptimisticGeolocationEnabled),\n    _ref2 = _slicedToArray(_ref, 2),\n    isGeolocationEnabled = _ref2[0],\n    setIsGeolocationEnabled = _ref2[1];\n  var _ref3 = (0, react_1.useState)(),\n    _ref4 = _slicedToArray(_ref3, 2),\n    coords = _ref4[0],\n    setCoords = _ref4[1];\n  var _ref5 = (0, react_1.useState)(),\n    _ref6 = _slicedToArray(_ref5, 2),\n    timestamp = _ref6[0],\n    setTimestamp = _ref6[1];\n  var _ref7 = (0, react_1.useState)(),\n    _ref8 = _slicedToArray(_ref7, 2),\n    positionError = _ref8[0],\n    setPositionError = _ref8[1];\n  var _ref9 = (0, react_1.useState)(),\n    _ref10 = _slicedToArray(_ref9, 2),\n    permissionState = _ref10[0],\n    setPermissionState = _ref10[1];\n  var cancelUserDecisionTimeout = (0, react_1.useCallback)(function () {\n    if (userDecisionTimeoutId.current) {\n      window.clearTimeout(userDecisionTimeoutId.current);\n    }\n  }, []);\n  var handlePositionError = (0, react_1.useCallback)(function (error) {\n    cancelUserDecisionTimeout();\n    if (isCurrentlyMounted.current) {\n      setCoords(function () {\n        return undefined;\n      });\n      setIsGeolocationEnabled(false);\n      setPositionError(error);\n    }\n    onError === null || onError === void 0 ? void 0 : onError(error);\n  }, [onError, cancelUserDecisionTimeout]);\n  var handlePositionSuccess = (0, react_1.useCallback)(function (position) {\n    cancelUserDecisionTimeout();\n    if (isCurrentlyMounted.current) {\n      setCoords(position.coords);\n      setTimestamp(position.timestamp);\n      setIsGeolocationEnabled(true);\n      setPositionError(function () {\n        return undefined;\n      });\n    }\n    onSuccess === null || onSuccess === void 0 ? void 0 : onSuccess(position);\n  }, [onSuccess, cancelUserDecisionTimeout]);\n  var getPosition = (0, react_1.useCallback)(function () {\n    if (!geolocationProvider || !geolocationProvider.getCurrentPosition || !geolocationProvider.watchPosition) {\n      throw new Error(\"The provided geolocation provider is invalid\");\n    }\n    if (userDecisionTimeout) {\n      userDecisionTimeoutId.current = window.setTimeout(function () {\n        handlePositionError();\n      }, userDecisionTimeout);\n    }\n    if (watchPosition) {\n      watchId.current = geolocationProvider.watchPosition(handlePositionSuccess, handlePositionError, positionOptions);\n    } else {\n      geolocationProvider.getCurrentPosition(handlePositionSuccess, handlePositionError, positionOptions);\n    }\n  }, [geolocationProvider, watchPosition, userDecisionTimeout, handlePositionError, handlePositionSuccess, positionOptions]);\n  (0, react_1.useEffect)(function () {\n    var permission;\n    if (watchLocationPermissionChange && geolocationProvider && \"permissions\" in navigator) {\n      navigator.permissions.query({\n        name: \"geolocation\"\n      }).then(function (result) {\n        permission = result;\n        permission.onchange = function () {\n          setPermissionState(permission.state);\n        };\n      }).catch(function (e) {\n        console.error(\"Error updating the permissions\", e);\n      });\n    }\n    return function () {\n      if (permission) {\n        permission.onchange = null;\n      }\n    };\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  (0, react_1.useEffect)(function () {\n    if (!suppressLocationOnMount) {\n      getPosition();\n    }\n    return function () {\n      cancelUserDecisionTimeout();\n      if (watchPosition && watchId.current) {\n        geolocationProvider === null || geolocationProvider === void 0 ? void 0 : geolocationProvider.clearWatch(watchId.current);\n      }\n    };\n  }, [permissionState]); // eslint-disable-line react-hooks/exhaustive-deps\n  return {\n    getPosition: getPosition,\n    coords: coords,\n    timestamp: timestamp,\n    isGeolocationEnabled: isGeolocationEnabled,\n    isGeolocationAvailable: Boolean(geolocationProvider),\n    positionError: positionError\n  };\n}\nexports.useGeolocated = useGeolocated;","map":null,"metadata":{},"sourceType":"script"}